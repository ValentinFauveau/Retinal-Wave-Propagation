function varargout = Retinal_Wave_Propagation(varargin)
% Retinal_Wave_Propagation MATLAB code for Retinal_Wave_Propagation.fig
%      Retinal_Wave_Propagation, by itself, creates a new Retinal_Wave_Propagation or raises the existing
%      singleton*.
%
%      H = Retinal_Wave_Propagation returns the handle to a new Retinal_Wave_Propagation or the handle to
%      the existing singleton*.
%
%      Retinal_Wave_Propagation('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in Retinal_Wave_Propagation.M with the given input arguments.
%
%      Retinal_Wave_Propagation('Property','Value',...) creates a new Retinal_Wave_Propagation or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before Retinal_Wave_Propagation_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to Retinal_Wave_Propagation_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help Retinal_Wave_Propagation

% Last Modified by GUIDE v2.5 13-Sep-2018 20:36:43

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @Retinal_Wave_Propagation_OpeningFcn, ...
                   'gui_OutputFcn',  @Retinal_Wave_Propagation_OutputFcn, ...
                   'gui_LayoutFcn',  @Retinal_Wave_Propagation_LayoutFcn, ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before Retinal_Wave_Propagation is made visible.
function Retinal_Wave_Propagation_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to Retinal_Wave_Propagation (see VARARGIN)

% Choose default command line output for Retinal_Wave_Propagation
handles.output = hObject;

% create an axes that spans the whole gui
ah = axes('unit', 'normalized', 'position', [0 0 1 1]); 
% import the background image and show it on the axes
bg = imread('eye.jpg'); imagesc(bg);
% prevent plotting over the background and turn the axis off
set(ah,'handlevisibility','off','visible','off')
% making sure the background is behind all the other uicontrols
uistack(ah, 'bottom');

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes Retinal_Wave_Propagation wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = Retinal_Wave_Propagation_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;



function edit1_Callback(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit1 as text
%        str2double(get(hObject,'String')) returns contents of edit1 as a double

%Select the size of the matrix of cells
s=str2double(get(hObject,'String'));

%Select the radius of the hexagons
%Scale: 1 = 34 um
r=1;

%Reseting the axes
cla;

%Creating a wait bar until the creation of the matrix of cells
h1=waitbar(s*s,'Please wait...','WindowStyle','modal');

%Half of the width of the hexagone (distance between the center of the
%hexagon and the middle of one of the edges
a=sqrt((3*r^2)/4);

%Creating the meshgrid
[X Y] = meshgrid(0:1:s-1);
X=reshape(X,1,s*s);
Y=reshape(Y,1,s*s);

%Using the matrix of transformation from square grid to hexagonal grid
H=[(3/2)*r 0;a 2*a]*[X;Y];

%Here we create a vector to create a square matrix instead of a
%rhombus matrix in the next step
odd = H(2,1:s);
even = H(2,(s+1):2*s);
new=[odd even];
new=repmat(new,1,s);
new=new(1:s*s);

%Creating the matrix of hexagons with random colour

%Vector used to create the hexagons in each center specified by H() and
%new()
t=(0:1/6:1)'*2*pi;

for i=1:s*s
    %Specification of the axis where we want to plot the matrix of cells
    axes(handles.axes1);
    %Ploting the hexagons for each center 
    x=cos(t)*r+H(1,i);
    y=sin(t)*r+new(i);
    plot(handles.axes1,x,y,'visible','off');
    hold(handles.axes1,'on');
    %Fill hexagons with a random color
    h(i)=patch(x,y,rand(1,3),'visible','off');
    colormap(hot);
    %Feedback to the user about the process state
    waitbar(i/(s*s));
end

%Setting the axes and visibility
set(handles.axes1,'XLim',[-r H(1,length(H(1,:)))+1],'YLim',[-a 2*a*s]);
set(handles.axes1,'Visible','on');
set(h(:),'visible','on');

%Closing the waitbar
wh=findall(0,'tag','TMWWaitbar');
delete(wh);

%Creating a structure with the coordinates of the center of the hexagons,
%the patch of each hexagon and the handles of the axes where the the matrix
%of cells is
myhandles = guihandles(handles.figure1);
myhandles.hexagons = h(:);
myhandles.centersX = H(1,:);
myhandles.centersY = new;
myhandles.axes1 = handles.axes1;

%Saving the structure myhandles
guidata(gcf,myhandles);

% --- Executes during object creation, after setting all properties.
function edit1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Input of the user representing the time of the experience in seconds
s=str2double(get(handles.time,'String'));

%Showing the time
set(handles.real_time_str,'Visible','on');
set(handles.real_time,'Visible','on');

%Time step 
deltaT=25; %ms
%Total time steps
TotalSteps=(s*1000)/deltaT;

%Charging the values of the coordinates of the center of the hexagons and
%the handled patch of each hexagon
H(1,:)=handles.centersX;
H(2,:)=handles.centersY;
h=handles.hexagons;

%Calculating the length of the number of pixels in total
n=length(H(1,:));

%Inputs depending on the species
val=get(handles.popupmenu1,'Value');
if val==1
    %Ferret P2-P4
    P = 43000;  %% in ms
    H1 = 4;
    H2 = 0.75;
    D = 1300;  %% in ms
    M = 1.0;
    K = 250;  %% in ms
elseif val ==2
    %Rabbit E24-P1
    P = 44000;  %% in ms
    H1 = 4;
    H2 = 0.6;
    D = 1050;  %% in ms
    M = 1.0;
    K = 250;  %% in ms
elseif val==3
    %Mouse P0-P13
    P = 32000;  %% in ms
    H1 = 4;
    H2 = 0.75;
    D = 2300;  %% in ms
    M = 1.0;
    K = 350;  %% in ms
elseif val==4
    %Chick E14-15
    P = 30000;  %% in ms
    H1 = 3.1;
    H2 = 0.1;
    D = 800;  %% in ms
    M = 1.0;
    K = 20;  %% in ms
elseif val==5
    %Chick E16
    P = 38000;  %% in ms
    H1 = 4;
    H2 = 0.4;
    D = 1050;  %% in ms
    M = 1.0;
    K = 25;  %% in ms
elseif val==6
    %Turtle E23-E24
    P = 23000;  %% in ms
    H1 = 4;
    H2 = 0.7;
    D = 1000;  %% in ms
    M = 1.0;
    K = 200;  %% in ms
end

%Radius of the dendrites of a cell, knowing that 34um=1.
r=85/34; %um

%Distance between the center of the hexagons pairwise
Dis = pdist(H');
%Matrix of the distance between all the points
Distance = squareform(Dis);  
%Generate a random matrix for initial threshold
R = 0.5+(5 - 0.5)*rand(1,n);  
%Initial values of the active state of each cell
A = zeros(1,n);  
%Initial values of the excitation level for each cell at the beginning
X = zeros(1,n); 

%Initial values of the excitatory strength between cells
W = zeros(n);
for i = 1:n
    % Vector of distances within the radius of the dendrites of each cell  
    v = find( Distance(i,:)>0 & Distance(i,:)<2*r ); 
    for j =1:length(v)
        W(i,v(j)) = weight(r,Distance(i,v(j)));
    end
end

%Boundary conditions

%After looking at the scope of the dendrites of a cell, we just do the
    %boundary conditions analyzing three rows below the cell. If we change
    %the radius of the dendrites and we want a bigger scope we have to
    %change the following code

%Top

%Creating a vector to only analyse the cells of te three first rows
k=0;
for a=0:sqrt(n)-1
    k=[k 1+a*sqrt(n) 2+a*sqrt(n) 3+a*sqrt(n)];
end
k=k(2:length(k));

%This counter is use to advance in rows or columns to copy the values on
%the other side
%After experimental observations we saw that the length up, down, right and
%left should be of 3 cells that corespond more or less to the distance that
%a cell can affect their neighbors

%Top
%Creating a vector to only analyse the cells of te three first rows
k=0;
for a=0:sqrt(n)-1
    k=[k 1+a*sqrt(n) 2+a*sqrt(n) 3+a*sqrt(n)];
end
k=k(2:length(k));
count2=0;
for i=1:length(k)
    
    bound=reshape(W(k(i),:),sqrt(n),sqrt(n));
    
    count=1;
    for j=1:sqrt(n)*3
        if bound(1+ceil(j/sqrt(n))+count2,count)~=0
            bound(sqrt(n)-floor((j-1)/sqrt(n)),count)=bound(1+ceil(j/sqrt(n))+count2,count);
        end
        count=count+1;
        if mod(j,sqrt(n))==0
            count=1;
        end
    end
    
    if mod(i,3)==0
        count2=0;
    else
        count2=count2+2;
    end
    
    bound=reshape(bound,1,n);
    W(k(i),:)=bound;
end

%Bottom
%Creating a vector to only analyse the cells of te three last rows
k=0;
for a=1:sqrt(n)
    k=[k a*sqrt(n)-2 a*sqrt(n)-1 a*sqrt(n)];
end
k=k(2:length(k));
count2=4;
for i=1:length(k)
    
    bound=reshape(W(k(i),:),sqrt(n),sqrt(n));
    
    count=1;
    for j=1:sqrt(n)*3
        if bound(sqrt(n)-count2-ceil(j/sqrt(n)),count)~=0
            bound(floor((j-1)/sqrt(n))+1,count)=bound(sqrt(n)-count2-ceil(j/sqrt(n)),count);
        end
        count=count+1;
        if mod(j,sqrt(n))==0
            count=1;
        end
    end
    
    if mod(k(i),10)==0
        count2=4;
    else
        count2=count2-2;
    end
    
    bound=reshape(bound,1,n);
    W(k(i),:)=bound;
end

%Left side
count2=0;
for i=1:sqrt(n)*3
    bound=reshape(W(i,:),sqrt(n),sqrt(n));

    count=1;
    for j=1:sqrt(n)*3
        if bound(count,ceil(i/sqrt(n))+ceil(j/sqrt(n))+count2)~=0
            bound(count,sqrt(n)-floor((j-1)/sqrt(n)))=bound(count,ceil(i/sqrt(n))+ceil(j/sqrt(n))+count2);
        end
        count=count+1;
        if mod(j,sqrt(n))==0
            count=1;
        end
    end
    
    if mod(i,sqrt(n))==0
        count2=count2+1;
    end
    
    bound=reshape(bound,1,n);
    W(i,:)=bound;
end

%Right side
count2=2;
for i=n-sqrt(n)*3+1:n
    bound=reshape(W(i,:),sqrt(n),sqrt(n));

    count=1;
    for j=1:sqrt(n)*3
        if bound(count,ceil(i/sqrt(n))-ceil(j/sqrt(n))-count2)~=0
            bound(count,floor((j-1)/sqrt(n))+1)=bound(count,ceil(i/sqrt(n))-ceil(j/sqrt(n))-count2);
        end
        count=count+1;
        if mod(j,sqrt(n))==0
            count=1;
        end
    end
    
    if mod(i,sqrt(n))==0
        count2=count2-1;
    end
    
    bound=reshape(bound,1,n);
    W(i,:)=bound;
end

%Creating a colormap
color=zeros(10,3);
color(2,:)=[0 0 0.3];
color(3,:)=[0 0 0.6];
color(4,:)=[0 0 1];
color(5,:)=[0.5 0 0.5];
color(6,:)=[1 0 0];
color(7,:)=[1 0.3 0];
color(8,:)=[1 0.6 0];
color(9,:)=[1 1 0];
color(10,:)=[1 1 1];

%Vector wich will help to patch the color in each hexagon
colorOut=zeros(n,3); 

% MAIN LOOP
for t = 1 :TotalSteps %%Each step correspond to 25 ms 
    N = input(W,A);
    X = excitLev(N,X,deltaT,K);
    R = R + threshold(A,N,R,H1,H2,M,P,D,deltaT);
    A = ifActive(X,R);
    %Computing the new color pixel of each hexagon
    ColorPix = X-R;
    ColorPix=(ColorPix+5)/5;

    %Determining and setting the color of each hexagon
    for i=1:n
        if ColorPix(i)<0.2
            colorOut(i,:)=color(1,:);
        elseif ColorPix(i)>=0.2 & ColorPix(i)<0.3
            colorOut(i,:)=color(2,:);
        elseif ColorPix(i)>=0.3 & ColorPix(i)<0.4
            colorOut(i,:)=color(3,:);
        elseif ColorPix(i)>=0.4 & ColorPix(i)<0.5
            colorOut(i,:)=color(4,:);
        elseif ColorPix(i)>=0.5 & ColorPix(i)<0.6
            colorOut(i,:)=color(5,:);
        elseif ColorPix(i)>=0.6 & ColorPix(i)<0.7
            colorOut(i,:)=color(6,:);
        elseif ColorPix(i)>=0.7 & ColorPix(i)<0.8
            colorOut(i,:)=color(7,:);
        elseif ColorPix(i)>=0.8 & ColorPix(i)<0.9
            colorOut(i,:)=color(8,:);
        elseif ColorPix(i)>=0.9 & ColorPix(i)<1
            colorOut(i,:)=color(9,:);
        elseif ColorPix(i)>=1
            colorOut(i,:)=color(10,:);
        end
        
        set(h(i),'FaceColor',colorOut(i,:));
    end
    
    t
    
    if ceil(mod(40,t))==40
    set(handles.real_time,'String',num2str(round(t*25/1000)));
    end
    pause(0.01);
end

%This function computes the excitation level of each cell
function X = excitLev(N,X,deltaT,K)

n = length(N);
deltaX = zeros(1,n);

for i=1:n
deltaX(i) = (N(i)-X(i))*deltaT/K;
end

X = X + deltaX;

%This function determines if a cell is active (1) or not (0)
function A = ifActive(X,R)
n = length(X);
A = X - R;  
temp = zeros(1,n);
temp(find(A>=0)) = 1;
A = temp;

%This function compute the strength of overlap between cells that
%correspond to the area of the intersection of their radius of dendrites 
%divided by the total area of one cell
function [ w ] = weight( r,d)
n = 2 * acos(d/(2*r));  %% the angle of the overlap
area_overlap = 2 * (n*(r^2)/2 - (r^2)*sin(n)/2);  %% the area of the overlap
w = area_overlap/(pi*r^2);

%This function computes the threshold of each cell
function [ deltaR ] = threshold( A,N,R,H1,H2,M,P,D,deltaT)
n=length(R);
deltaR = zeros(1,n);

r1 = -H1*M/P;
for i=1:n
    deltaR(i) = (r1 + A(i)*((H1+N(i)*H2)/D)) * deltaT;
end

%This function computes the total input activity of a cell 
function [ N ] = input(W,A)

n=length(A(1,:));
N = zeros(1,n);

for i = 1:n
    temp =  W(i,:);
    N(i) = sum(temp.*A);
end

function time_Callback(hObject, eventdata, handles)
% hObject    handle to time (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of time as text
%        str2double(get(hObject,'String')) returns contents of time as a double


% --- Executes during object creation, after setting all properties.
function time_CreateFcn(hObject, eventdata, handles)
% hObject    handle to time (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in popupmenu1.
function popupmenu1_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu1 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu1


% --- Executes during object creation, after setting all properties.
function popupmenu1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in with_noise.
function with_noise_Callback(hObject, eventdata, handles)
% hObject    handle to with_noise (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of with_noise
wn=get(handles.with_noise,'Value');

if wn==1 
    set(handles.without_noise,'Value',0);
else 
    set(handles.without_noise,'Value',1);
end

% --- Executes on button press in without_noise.
function without_noise_Callback(hObject, eventdata, handles)
% hObject    handle to without_noise (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of without_noise
won=get(handles.without_noise,'Value');

if won==0
    set(handles.with_noise,'Value',1);
else
    set(handles.with_noise,'Value',0);
end


% --- Creates and returns a handle to the GUI figure. 
function h1 = Retinal_Wave_Propagation_LayoutFcn(policy)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

persistent hsingleton;
if strcmpi(policy, 'reuse') & ishandle(hsingleton)
    h1 = hsingleton;
    return;
end

appdata = [];
appdata.GUIDEOptions = struct(...
    'active_h', [], ...
    'taginfo', struct(...
    'figure', 2, ...
    'text', 9, ...
    'edit', 3, ...
    'axes', 3, ...
    'pushbutton', 2, ...
    'slider', 2, ...
    'popupmenu', 2, ...
    'radiobutton', 3), ...
    'override', 0, ...
    'release', 13, ...
    'resize', 'none', ...
    'accessibility', 'callback', ...
    'mfile', 1, ...
    'callbacks', 1, ...
    'singleton', 1, ...
    'syscolorfig', 1, ...
    'blocking', 0, ...
    'lastSavedFile', 'C:\Users\Valentin\Documents\GitHub\Retinal-Wave-Propagation\test\Retinal_Wave_Propagation.m', ...
    'lastFilename', 'C:\Users\Valentin\Documents\GitHub\Retinal-Wave-Propagation\test\Retinal_Wave_Propagation.fig');
appdata.lastValidTag = 'figure1';
appdata.GUIDELayoutEditor = [];
appdata.initTags = struct(...
    'handle', [], ...
    'tag', 'figure1');

h1 = figure(...
'Units','characters',...
'Position',[103.8 14.6153846153846 140.2 46.8461538461539],...
'Visible','on',...
'Color',get(0,'defaultfigureColor'),...
'IntegerHandle','off',...
'Colormap',[0 0 0.5625;0 0 0.625;0 0 0.6875;0 0 0.75;0 0 0.8125;0 0 0.875;0 0 0.9375;0 0 1;0 0.0625 1;0 0.125 1;0 0.1875 1;0 0.25 1;0 0.3125 1;0 0.375 1;0 0.4375 1;0 0.5 1;0 0.5625 1;0 0.625 1;0 0.6875 1;0 0.75 1;0 0.8125 1;0 0.875 1;0 0.9375 1;0 1 1;0.0625 1 1;0.125 1 0.9375;0.1875 1 0.875;0.25 1 0.8125;0.3125 1 0.75;0.375 1 0.6875;0.4375 1 0.625;0.5 1 0.5625;0.5625 1 0.5;0.625 1 0.4375;0.6875 1 0.375;0.75 1 0.3125;0.8125 1 0.25;0.875 1 0.1875;0.9375 1 0.125;1 1 0.0625;1 1 0;1 0.9375 0;1 0.875 0;1 0.8125 0;1 0.75 0;1 0.6875 0;1 0.625 0;1 0.5625 0;1 0.5 0;1 0.4375 0;1 0.375 0;1 0.3125 0;1 0.25 0;1 0.1875 0;1 0.125 0;1 0.0625 0;1 0 0;0.9375 0 0;0.875 0 0;0.8125 0 0;0.75 0 0;0.6875 0 0;0.625 0 0;0.5625 0 0],...
'MenuBar','none',...
'Name','Retinal_Wave_Propagation',...
'NumberTitle','off',...
'Tag','figure1',...
'UserData',[],...
'Resize','off',...
'PaperPosition',get(0,'defaultfigurePaperPosition'),...
'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
'ScreenPixelsPerInchMode','manual',...
'HandleVisibility','callback',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'axes1';

h2 = axes(...
'Parent',h1,...
'FontUnits',get(0,'defaultaxesFontUnits'),...
'Units','characters',...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'CameraTarget',[0.5 0.5 0.5],...
'CameraTargetMode',get(0,'defaultaxesCameraTargetMode'),...
'CameraViewAngle',6.60861036031192,...
'CameraViewAngleMode',get(0,'defaultaxesCameraViewAngleMode'),...
'PlotBoxAspectRatio',[1 0.750623441396509 0.750623441396509],...
'PlotBoxAspectRatioMode',get(0,'defaultaxesPlotBoxAspectRatioMode'),...
'XTick',[0 0.2 0.4 0.6 0.8 1],...
'XTickMode',get(0,'defaultaxesXTickMode'),...
'XTickLabel',{  '0'; '0.2'; '0.4'; '0.6'; '0.8'; '1' },...
'XTickLabelMode',get(0,'defaultaxesXTickLabelMode'),...
'YTick',[0 0.2 0.4 0.6 0.8 1],...
'YTickMode',get(0,'defaultaxesYTickMode'),...
'YTickLabel',{  '0'; '0.2'; '0.4'; '0.6'; '0.8'; '1' },...
'YTickLabelMode',get(0,'defaultaxesYTickLabelMode'),...
'Color',get(0,'defaultaxesColor'),...
'CameraMode',get(0,'defaultaxesCameraMode'),...
'DataSpaceMode',get(0,'defaultaxesDataSpaceMode'),...
'ColorSpaceMode',get(0,'defaultaxesColorSpaceMode'),...
'DecorationContainerMode',get(0,'defaultaxesDecorationContainerMode'),...
'ChildContainerMode',get(0,'defaultaxesChildContainerMode'),...
'XRulerMode',get(0,'defaultaxesXRulerMode'),...
'XBaselineMode',get(0,'defaultaxesXBaselineMode'),...
'YRulerMode',get(0,'defaultaxesYRulerMode'),...
'YBaselineMode',get(0,'defaultaxesYBaselineMode'),...
'ZRulerMode',get(0,'defaultaxesZRulerMode'),...
'ZBaselineMode',get(0,'defaultaxesZBaselineMode'),...
'AmbientLightSourceMode',get(0,'defaultaxesAmbientLightSourceMode'),...
'Tag','axes1',...
'Position',[9.8 4.38461538461539 80.2 23.1538461538462],...
'ActivePositionProperty','position',...
'ActivePositionPropertyMode',get(0,'defaultaxesActivePositionPropertyMode'),...
'LooseInset',[18.252 5.06846153846154 13.338 3.45576923076923],...
'SortMethod','childorder',...
'SortMethodMode',get(0,'defaultaxesSortMethodMode'),...
'Visible','off',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h3 = get(h2,'title');

set(h3,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0 0 0],...
'ColorMode','auto',...
'Position',[0.500000595749168 1.00830564784053 0.5],...
'PositionMode','auto',...
'String',blanks(0),...
'Interpreter','tex',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontSize',10,...
'FontAngle','normal',...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'LineStyle','-',...
'LineWidth',0.5,...
'BackgroundColor','none',...
'Margin',2,...
'Clipping','off',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'DisplayName',blanks(0),...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HelpTopicKey',blanks(0),...
'ButtonDownFcn',blanks(0),...
'BusyAction','queue',...
'Interruptible','on',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag',blanks(0),...
'HitTest','on',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'DimensionNames',{  'X' 'Y' 'Z' },...
'DimensionNamesMode','auto',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Description','Axes Title',...
'DescriptionMode','auto',...
'Visible','off',...
'Serializable','on',...
'HandleVisibility','off',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h4 = get(h2,'xlabel');

set(h4,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0.500000476837158 -0.0786267978738445 0],...
'PositionMode','auto',...
'String',blanks(0),...
'Interpreter','tex',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontSize',10,...
'FontAngle','normal',...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','top',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'LineStyle','-',...
'LineWidth',0.5,...
'BackgroundColor','none',...
'Margin',2,...
'Clipping','off',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'DisplayName',blanks(0),...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HelpTopicKey',blanks(0),...
'ButtonDownFcn',blanks(0),...
'BusyAction','queue',...
'Interruptible','on',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag',blanks(0),...
'HitTest','on',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'DimensionNames',{  'X' 'Y' 'Z' },...
'DimensionNamesMode','auto',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','off',...
'Serializable','on',...
'HandleVisibility','off',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h5 = get(h2,'ylabel');

set(h5,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[-0.0706566901922424 0.500000476837158 0],...
'PositionMode','auto',...
'String',blanks(0),...
'Interpreter','tex',...
'Rotation',90,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontSize',10,...
'FontAngle','normal',...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'LineStyle','-',...
'LineWidth',0.5,...
'BackgroundColor','none',...
'Margin',2,...
'Clipping','off',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'DisplayName',blanks(0),...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HelpTopicKey',blanks(0),...
'ButtonDownFcn',blanks(0),...
'BusyAction','queue',...
'Interruptible','on',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag',blanks(0),...
'HitTest','on',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'DimensionNames',{  'X' 'Y' 'Z' },...
'DimensionNamesMode','auto',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','off',...
'Serializable','on',...
'HandleVisibility','off',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h6 = get(h2,'zlabel');

set(h6,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0 0 0],...
'PositionMode','auto',...
'String',blanks(0),...
'Interpreter','tex',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontSize',10,...
'FontAngle','normal',...
'FontWeight','normal',...
'HorizontalAlignment','right',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','middle',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'LineStyle','-',...
'LineWidth',0.5,...
'BackgroundColor','none',...
'Margin',2,...
'Clipping','off',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'DisplayName',blanks(0),...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HelpTopicKey',blanks(0),...
'ButtonDownFcn',blanks(0),...
'BusyAction','queue',...
'Interruptible','on',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag',blanks(0),...
'HitTest','on',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'DimensionNames',{  'X' 'Y' 'Z' },...
'DimensionNamesMode','auto',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','off',...
'Serializable','on',...
'HandleVisibility','off',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

appdata = [];
appdata.lastValidTag = 'text1';

h7 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Wave Propagation in the Retina',...
'Style','text',...
'Position',[19.8 42.8461538461539 100.2 2.69230769230769],...
'Children',[],...
'Tag','text1',...
'FontSize',20,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'text2';

h8 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Select the number n to create a matrix of cells nxn',...
'Style','text',...
'Position',[9.8 35.2307692307692 50.2 3.61538461538461],...
'Children',[],...
'Tag','text2',...
'FontSize',15,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'edit1';

h9 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String',{  'Edit Text' },...
'Style','edit',...
'Position',[62.6 35.1538461538462 17.8 3.92307692307693],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)Retinal_Wave_Propagation('edit1_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)Retinal_Wave_Propagation('edit1_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','edit1',...
'FontSize',15);

appdata = [];
appdata.lastValidTag = 'text3';

h10 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Radius of each cell:',...
'Style','text',...
'Position',[9.8 31.3846153846154 50.2 2.07692307692308],...
'Children',[],...
'Tag','text3',...
'FontSize',15,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'text4';

h11 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','34 um',...
'Style','text',...
'Position',[62.6 31.3846153846154 16.6 2.15384615384615],...
'Children',[],...
'Tag','text4',...
'FontSize',15,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'pushbutton1';

h12 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Start',...
'Position',[99.6 4.46153846153846 30.2 3.92307692307692],...
'Callback',@(hObject,eventdata)Retinal_Wave_Propagation('pushbutton1_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'Tag','pushbutton1',...
'FontSize',15,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'text5';

h13 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Select the duration time (in seconds)',...
'Style','text',...
'Position',[99.6 12.1538461538462 30.2 6.61538461538462],...
'Children',[],...
'Tag','text5',...
'FontSize',15,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'time';

h14 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Time',...
'Style','edit',...
'Position',[99.6 8.30769230769231 30.2 3.92307692307692],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)Retinal_Wave_Propagation('time_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)Retinal_Wave_Propagation('time_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','time',...
'FontSize',15);

appdata = [];
appdata.lastValidTag = 'popupmenu1';

h15 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String',{  'Ferret P2-P4'; 'Rabbit E24-P1'; 'Mouse P0-P13'; 'Chick E14-15'; 'Chick E16'; 'Turtle E23-E24' },...
'Style','popupmenu',...
'Value',1,...
'Position',[99.8 19.8461538461538 30.2 1.61538461538462],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)Retinal_Wave_Propagation('popupmenu1_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)Retinal_Wave_Propagation('popupmenu1_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','popupmenu1');

appdata = [];
appdata.lastValidTag = 'text6';

h16 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Select a specie to adjust the parameter sets',...
'Style','text',...
'Position',[99.6 21.5384615384615 30.2 6],...
'Children',[],...
'Tag','text6',...
'FontSize',15,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'with_noise';

h17 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','With noise',...
'Style','radiobutton',...
'Position',[107 0.307692307692308 17.4 1.76923076923077],...
'Callback',@(hObject,eventdata)Retinal_Wave_Propagation('with_noise_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'Tag','with_noise',...
'UserData',[],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'without_noise';

h18 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Without noise',...
'Style','radiobutton',...
'Value',1,...
'Position',[107 2.07692307692308 17.4 1.76923076923077],...
'Callback',@(hObject,eventdata)Retinal_Wave_Propagation('without_noise_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'Tag','without_noise',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'real_time_str';

h19 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','Time(in sec.)',...
'Style','text',...
'Position',[19.8 0.615384615384615 40.2 2.46153846153846],...
'Children',[],...
'Visible','off',...
'Tag','real_time_str',...
'FontSize',15,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'real_time';

h20 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','characters',...
'String','0',...
'Style','text',...
'Position',[61.6 0.615384615384615 18.4 2.46153846153846],...
'Children',[],...
'Visible','off',...
'Tag','real_time',...
'FontSize',15,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );


hsingleton = h1;


% --- Set application data first then calling the CreateFcn. 
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
   names = fieldnames(appdata);
   for i=1:length(names)
       name = char(names(i));
       setappdata(hObject, name, getfield(appdata,name));
   end
end

if ~isempty(createfcn)
   if isa(createfcn,'function_handle')
       createfcn(hObject, eventdata);
   else
       eval(createfcn);
   end
end


% --- Handles default GUIDE GUI creation and callback dispatch
function varargout = gui_mainfcn(gui_State, varargin)

gui_StateFields =  {'gui_Name'
    'gui_Singleton'
    'gui_OpeningFcn'
    'gui_OutputFcn'
    'gui_LayoutFcn'
    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error(message('MATLAB:guide:StateFieldNotFound', gui_StateFields{ i }, gui_Mfile));
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % Retinal_Wave_Propagation
    % create the GUI only if we are not in the process of loading it
    % already
    gui_Create = true;
elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
    % Retinal_Wave_Propagation(ACTIVEX,...)
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif local_isInvokeHGCallback(gui_State, varargin{:})
    % Retinal_Wave_Propagation('CALLBACK',hObject,eventData,handles,...)
    gui_Create = false;
else
    % Retinal_Wave_Propagation(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = true;
end

if ~gui_Create
    % In design time, we need to mark all components possibly created in
    % the coming callback evaluation as non-serializable. This way, they
    % will not be brought into GUIDE and not be saved in the figure file
    % when running/saving the GUI from GUIDE.
    designEval = false;
    if (numargin>1 && ishghandle(varargin{2}))
        fig = varargin{2};
        while ~isempty(fig) && ~ishghandle(fig,'figure')
            fig = get(fig,'parent');
        end
        
        designEval = isappdata(0,'CreatingGUIDEFigure') || (isscalar(fig)&&isprop(fig,'GUIDEFigure'));
    end
        
    if designEval
        beforeChildren = findall(fig);
    end
    
    % evaluate the callback now
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else       
        feval(varargin{:});
    end
    
    % Set serializable of objects created in the above callback to off in
    % design time. Need to check whether figure handle is still valid in
    % case the figure is deleted during the callback dispatching.
    if designEval && ishghandle(fig)
        set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end

    % Check user passing 'visible' P/V pair first so that its value can be
    % used by oepnfig to prevent flickering
    gui_Visible = 'auto';
    gui_VisibleInput = '';
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        % Recognize 'visible' P/V pair
        len1 = min(length('visible'),length(varargin{index}));
        len2 = min(length('off'),length(varargin{index+1}));
        if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
            if strncmpi(varargin{index+1},'off',len2)
                gui_Visible = 'invisible';
                gui_VisibleInput = 'off';
            elseif strncmpi(varargin{index+1},'on',len2)
                gui_Visible = 'visible';
                gui_VisibleInput = 'on';
            end
        end
    end
    
    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.

    
    % Do feval on layout code in m-file if it exists
    gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
    % this application data is used to indicate the running mode of a GUIDE
    % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
    % only used by actxproxy at this time.   
    setappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
    if gui_Exported
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);

        % make figure invisible here so that the visibility of figure is
        % consistent in OpeningFcn in the exported GUI case
        if isempty(gui_VisibleInput)
            gui_VisibleInput = get(gui_hFigure,'Visible');
        end
        set(gui_hFigure,'Visible','off')

        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        movegui(gui_hFigure,'onscreen');
    else
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        end
    end
    if isappdata(0, genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]))
        rmappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]));
    end

    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
    % Singleton setting in the GUI MATLAB code file takes priority if different
    gui_Options.singleton = gui_State.gui_Singleton;

    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end

    % Apply input P/V pairs other than 'visible'
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        len1 = min(length('visible'),length(varargin{index}));
        if ~strncmpi(varargin{index},'visible',len1)
            try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
        end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end

    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        % Handle the default callbacks of predefined toolbar tools in this
        % GUI, if any
        guidemfile('restoreToolbarToolPredefinedCallback',gui_hFigure); 
        
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

        % Call openfig again to pick up the saved visibility or apply the
        % one passed in from the P/V pairs
        if ~gui_Exported
            gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
        elseif ~isempty(gui_VisibleInput)
            set(gui_hFigure,'Visible',gui_VisibleInput);
        end
        if strcmpi(get(gui_hFigure, 'Visible'), 'on')
            figure(gui_hFigure);
            
            if gui_Options.singleton
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        if isappdata(gui_hFigure,'InGUIInitialization')
            rmappdata(gui_hFigure,'InGUIInitialization');
        end

        % If handle visibility is set to 'callback', turn it on until
        % finished with OutputFcn
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end

    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end

function gui_hFigure = local_openfig(name, singleton, visible)

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
if nargin('openfig') == 2
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
else
    % Call version of openfig that accepts 'auto' option"
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton, visible);  
%     %workaround for CreateFcn not called to create ActiveX
%         peers=findobj(findall(allchild(gui_hFigure)),'type','uicontrol','style','text');    
%         for i=1:length(peers)
%             if isappdata(peers(i),'Control')
%                 actxproxy(peers(i));
%             end            
%         end
end

function result = local_isInvokeActiveXCallback(gui_State, varargin)

try
    result = ispc && iscom(varargin{1}) ...
             && isequal(varargin{1},gcbo);
catch
    result = false;
end

function result = local_isInvokeHGCallback(gui_State, varargin)

try
    fhandle = functions(gui_State.gui_Callback);
    result = ~isempty(findstr(gui_State.gui_Name,fhandle.file)) || ...
             (ischar(varargin{1}) ...
             && isequal(ishghandle(varargin{2}), 1) ...
             && (~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])) || ...
                ~isempty(strfind(varargin{1}, '_CreateFcn'))) );
catch
    result = false;
end


